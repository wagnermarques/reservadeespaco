/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Solicitacoes.java
 *
 * Created on 20/10/2011, 16:49:55
 */
package br.com.fzlbpms.Fluxo.Janelas;

import br.com.fzlbpms.Fluxo.BancoDeDados.OperacaoBD;
import br.com.fzlbpms.Fluxo.Logicas.SolicitacaoEspaco;
import java.awt.Color;
import java.sql.SQLException;
import java.sql.Time;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author ascosta
 */
public class Solicitacoes extends javax.swing.JDialog {

    /** Creates new form Solicitacoes */
    public Solicitacoes(java.awt.Frame parent, boolean modal) throws ClassNotFoundException {
        super(parent, modal);
        initComponents();
    }

    public Solicitacoes(java.awt.Frame parent, boolean modal, String Solicitante) throws ClassNotFoundException {
        super(parent, modal);
        initComponents();
        this.Solicitante = Solicitante;
        habilitaAlimentacao(false);
        habilitaEquipamento(false);
        OperacaoBD bd = new OperacaoBD();
        try {
            List<String> setores = bd.getSetores();
            for (String string : setores) {
                jcbCoordenacaoSol.addItem(string);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Solicitacoes.class.getName()).log(Level.SEVERE, null, ex);
        }
        jtaInformacoes.setText("CAMPOS OBRIGATÓRIOS EM AZUL");
        DateFormat df = new SimpleDateFormat("HH:mm:ss");
        try {
            jtcHoraInicio.setTime(df.parse("07:00:00"));
            jtcHoraTermino.setTime(df.parse("08:00:00"));
            jtcHoraAlimentacao.setTime(df.parse("07:00:00"));
        } catch (ParseException ex) {
            Logger.getLogger(Solicitacoes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void habilitaAlimentacao(boolean valor) {
        jCheckBC1.setEnabled(valor);
        jCheckBC2.setEnabled(valor);
        jCheckBC3.setEnabled(valor);
        jCheckBC4.setEnabled(valor);
        jCheckBC5.setEnabled(valor);
        jCheckBC6.setEnabled(valor);
        if (valor) {
            jLabelHoraAlimentacao.setForeground(Color.BLUE);
        } else {
            jLabelHoraAlimentacao.setForeground(Color.black);
        }
    }

    private void habilitaEquipamento(boolean valor) {
        jCheckBCaixaSom.setEnabled(valor);
        jCheckBDVD.setEnabled(valor);
        jCheckBFoto.setEnabled(valor);
        jCheckBMesaSom.setEnabled(valor);
        jCheckBMicrofone.setEnabled(valor);
        jCheckBNotebook.setEnabled(valor);
        jCheckBProjetor.setEnabled(valor);
        jCheckBTelevisao.setEnabled(valor);
        jCheckBVK7.setEnabled(valor);
        jCheckBVideo.setEnabled(valor);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jtfExecutorAtividade = new javax.swing.JTextField();
        jtfNomeAtividade = new javax.swing.JTextField();
        jcbLocalSolicitado = new javax.swing.JComboBox();
        jcbCoordenacaoSol = new javax.swing.JComboBox();
        jPanelCardapios = new javax.swing.JPanel();
        jCheckBC2 = new javax.swing.JCheckBox();
        jCheckBC1 = new javax.swing.JCheckBox();
        jCheckBC6 = new javax.swing.JCheckBox();
        jCheckBC3 = new javax.swing.JCheckBox();
        jCheckBC4 = new javax.swing.JCheckBox();
        jCheckBC5 = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaInformacoes = new javax.swing.JTextArea();
        jPanelEquipamentos = new javax.swing.JPanel();
        jCheckBProjetor = new javax.swing.JCheckBox();
        jCheckBNotebook = new javax.swing.JCheckBox();
        jCheckBFoto = new javax.swing.JCheckBox();
        jCheckBVideo = new javax.swing.JCheckBox();
        jCheckBDVD = new javax.swing.JCheckBox();
        jCheckBCaixaSom = new javax.swing.JCheckBox();
        jCheckBMicrofone = new javax.swing.JCheckBox();
        jCheckBMesaSom = new javax.swing.JCheckBox();
        jCheckBTelevisao = new javax.swing.JCheckBox();
        jCheckBVK7 = new javax.swing.JCheckBox();
        jButtonSair = new javax.swing.JButton();
        jButtonNovo = new javax.swing.JButton();
        jButtonSalvar = new javax.swing.JButton();
        jPanelHorario = new javax.swing.JPanel();
        jtcHoraInicio = new lu.tudor.santec.jtimechooser.JTimeChooser();
        jtcHoraTermino = new lu.tudor.santec.jtimechooser.JTimeChooser();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jDateChooser = new com.toedter.calendar.JDateChooser();
        jsParticipantes = new javax.swing.JSpinner();
        jLabel14 = new javax.swing.JLabel();
        jLabelHoraAlimentacao = new javax.swing.JLabel();
        jtcHoraAlimentacao = new lu.tudor.santec.jtimechooser.JTimeChooser();
        jPanelEventoSemana = new javax.swing.JPanel();
        jCheckBAlimetancao = new javax.swing.JCheckBox();
        jCheckBEquipamento = new javax.swing.JCheckBox();
        jCheckBAnoTodo = new javax.swing.JCheckBox();
        jsSemanas = new javax.swing.JSpinner();
        jLabel15 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jtfObservacaoCliente = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Solicitações");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("DIRETORIA TÉCNICA");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("INSTITUTO PAULISTA DE GERIATRIA E GERONTOLOGIA");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("\"JOSÉ ERMÍRIO DE MORAES\"");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getClassLoader().getResource("Índice1_1.jpeg"))); // NOI18N

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("SECRETARIA DE ESTADO DA SAÚDE");

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getClassLoader().getResource("logo_ipgg2.gif"))); // NOI18N

        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setText("Local Solicitado");

        jLabel2.setForeground(new java.awt.Color(0, 0, 255));
        jLabel2.setText("Coordenação Solicitante");

        jLabel9.setForeground(new java.awt.Color(0, 0, 255));
        jLabel9.setText("Executor da Atividade");

        jLabel10.setForeground(new java.awt.Color(0, 0, 255));
        jLabel10.setText("Nome da Atividade");

        jcbLocalSolicitado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "selecione", "SALA 1", "SALA 2", "ANFITEATRO", "EXTERNO", "LANCHONETE - EVENTOS", "LANCHONETE - JOGOS", "LANCHONETE - DANÇAS" }));

        jcbCoordenacaoSol.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "selecione" }));

        jPanelCardapios.setBorder(javax.swing.BorderFactory.createTitledBorder("Cardápios"));
        jPanelCardapios.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPanelCardapiosFocusGained(evt);
            }
        });

        jCheckBC2.setText("Nº2");
        jCheckBC2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jCheckBC2MouseEntered(evt);
            }
        });
        jCheckBC2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBC2ActionPerformed(evt);
            }
        });

        jCheckBC1.setText("Nº1");
        jCheckBC1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jCheckBC1MouseEntered(evt);
            }
        });
        jCheckBC1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBC1ActionPerformed(evt);
            }
        });

        jCheckBC6.setText("Nº6");
        jCheckBC6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jCheckBC6MouseEntered(evt);
            }
        });
        jCheckBC6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBC6ActionPerformed(evt);
            }
        });

        jCheckBC3.setText("Nº3");
        jCheckBC3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jCheckBC3MouseEntered(evt);
            }
        });
        jCheckBC3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBC3ActionPerformed(evt);
            }
        });

        jCheckBC4.setText("Nº4");
        jCheckBC4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jCheckBC4MouseEntered(evt);
            }
        });
        jCheckBC4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBC4ActionPerformed(evt);
            }
        });

        jCheckBC5.setText("Nº5");
        jCheckBC5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jCheckBC5MouseEntered(evt);
            }
        });
        jCheckBC5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBC5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelCardapiosLayout = new javax.swing.GroupLayout(jPanelCardapios);
        jPanelCardapios.setLayout(jPanelCardapiosLayout);
        jPanelCardapiosLayout.setHorizontalGroup(
            jPanelCardapiosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCardapiosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBC1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBC2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBC3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBC4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBC5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jCheckBC6)
                .addGap(17, 17, 17))
        );
        jPanelCardapiosLayout.setVerticalGroup(
            jPanelCardapiosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCardapiosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCardapiosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBC2)
                    .addComponent(jCheckBC1)
                    .addComponent(jCheckBC3)
                    .addComponent(jCheckBC4)
                    .addComponent(jCheckBC6)
                    .addComponent(jCheckBC5))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Informações do Sistema"));

        jtaInformacoes.setColumns(20);
        jtaInformacoes.setEditable(false);
        jtaInformacoes.setLineWrap(true);
        jtaInformacoes.setRows(5);
        jtaInformacoes.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jtaInformacoes);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanelEquipamentos.setBorder(javax.swing.BorderFactory.createTitledBorder("Equipamentos"));

        jCheckBProjetor.setText("Projetor");

        jCheckBNotebook.setText("Notebook");

        jCheckBFoto.setText("Foto");

        jCheckBVideo.setText("Vídeo");

        jCheckBDVD.setText("DVD");

        jCheckBCaixaSom.setText("Caixas de Som");

        jCheckBMicrofone.setText("Microfone");

        jCheckBMesaSom.setText("Mesa de Som");

        jCheckBTelevisao.setText("Televisão");

        jCheckBVK7.setText("Video Cassete");

        javax.swing.GroupLayout jPanelEquipamentosLayout = new javax.swing.GroupLayout(jPanelEquipamentos);
        jPanelEquipamentos.setLayout(jPanelEquipamentosLayout);
        jPanelEquipamentosLayout.setHorizontalGroup(
            jPanelEquipamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEquipamentosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelEquipamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBProjetor)
                    .addComponent(jCheckBNotebook)
                    .addComponent(jCheckBFoto)
                    .addComponent(jCheckBVideo)
                    .addComponent(jCheckBDVD))
                .addGap(75, 75, 75)
                .addGroup(jPanelEquipamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBVK7)
                    .addComponent(jCheckBTelevisao)
                    .addComponent(jCheckBMesaSom)
                    .addComponent(jCheckBMicrofone)
                    .addComponent(jCheckBCaixaSom))
                .addContainerGap(9, Short.MAX_VALUE))
        );
        jPanelEquipamentosLayout.setVerticalGroup(
            jPanelEquipamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEquipamentosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelEquipamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBProjetor)
                    .addComponent(jCheckBCaixaSom))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelEquipamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBNotebook)
                    .addComponent(jCheckBMicrofone))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelEquipamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBFoto)
                    .addComponent(jCheckBMesaSom))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelEquipamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBVideo)
                    .addComponent(jCheckBTelevisao))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelEquipamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBDVD)
                    .addComponent(jCheckBVK7))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButtonSair.setText("Sair");
        jButtonSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairActionPerformed(evt);
            }
        });

        jButtonNovo.setText("Novo");
        jButtonNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNovoActionPerformed(evt);
            }
        });

        jButtonSalvar.setText("Salvar");
        jButtonSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarActionPerformed(evt);
            }
        });

        jPanelHorario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanelHorarioMouseEntered(evt);
            }
        });

        jLabel12.setForeground(new java.awt.Color(0, 0, 255));
        jLabel12.setText("Hora do Início");

        jLabel13.setForeground(new java.awt.Color(0, 0, 255));
        jLabel13.setText("Hora do Término");

        jLabel11.setForeground(new java.awt.Color(0, 0, 255));
        jLabel11.setText("Data da Atividade");

        jsParticipantes.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

        jLabel14.setText("Participantes");

        jLabelHoraAlimentacao.setForeground(new java.awt.Color(0, 0, 255));
        jLabelHoraAlimentacao.setText("Hora da Alimentação");

        javax.swing.GroupLayout jPanelHorarioLayout = new javax.swing.GroupLayout(jPanelHorario);
        jPanelHorario.setLayout(jPanelHorarioLayout);
        jPanelHorarioLayout.setHorizontalGroup(
            jPanelHorarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelHorarioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelHorarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelHoraAlimentacao)
                    .addGroup(jPanelHorarioLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(jPanelHorarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelHorarioLayout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(18, 18, 18)
                                .addComponent(jDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelHorarioLayout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addGap(42, 42, 42)
                                .addComponent(jsParticipantes, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addGroup(jPanelHorarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelHorarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelHorarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jtcHoraInicio, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jtcHoraTermino, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jtcHoraAlimentacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanelHorarioLayout.setVerticalGroup(
            jPanelHorarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHorarioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelHorarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel12)
                    .addComponent(jtcHoraInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelHorarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtcHoraTermino, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelHorarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel13)
                        .addComponent(jLabel14)
                        .addComponent(jsParticipantes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelHorarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelHoraAlimentacao)
                    .addComponent(jtcHoraAlimentacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelEventoSemana.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanelEventoSemanaMouseEntered(evt);
            }
        });

        jCheckBAlimetancao.setText("Necessita Alimentação?");
        jCheckBAlimetancao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBAlimetancaoActionPerformed(evt);
            }
        });

        jCheckBEquipamento.setText("Necessita Equipamentos?");
        jCheckBEquipamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBEquipamentoActionPerformed(evt);
            }
        });

        jCheckBAnoTodo.setText("É Evento Para o Ano Todo?");

        jsSemanas.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

        jLabel15.setText("Semanas do Evento");

        javax.swing.GroupLayout jPanelEventoSemanaLayout = new javax.swing.GroupLayout(jPanelEventoSemana);
        jPanelEventoSemana.setLayout(jPanelEventoSemanaLayout);
        jPanelEventoSemanaLayout.setHorizontalGroup(
            jPanelEventoSemanaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEventoSemanaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelEventoSemanaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelEventoSemanaLayout.createSequentialGroup()
                        .addComponent(jCheckBAlimetancao)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBAnoTodo))
                    .addGroup(jPanelEventoSemanaLayout.createSequentialGroup()
                        .addComponent(jCheckBEquipamento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jsSemanas, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelEventoSemanaLayout.setVerticalGroup(
            jPanelEventoSemanaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEventoSemanaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelEventoSemanaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBAlimetancao)
                    .addComponent(jCheckBAnoTodo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelEventoSemanaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jCheckBEquipamento)
                    .addComponent(jLabel15)
                    .addComponent(jsSemanas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jLabel17.setText("Observação");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelCardapios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonSalvar)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonNovo)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonSair))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addComponent(jPanelEquipamentos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfObservacaoCliente))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanelHorario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelEventoSemana, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jtfNomeAtividade)
                                    .addComponent(jcbLocalSolicitado, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel9))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jcbCoordenacaoSol, javax.swing.GroupLayout.Alignment.TRAILING, 0, 272, Short.MAX_VALUE)
                                    .addComponent(jtfExecutorAtividade, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(96, 96, 96)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
                                .addComponent(jLabel8)
                                .addGap(21, 21, 21)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6))
                            .addComponent(jLabel3))
                        .addGap(42, 42, 42))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(jcbLocalSolicitado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jcbCoordenacaoSol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel10)
                    .addComponent(jtfNomeAtividade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jtfExecutorAtividade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelEventoSemana, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelHorario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelEquipamentos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(jtfObservacaoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonSair)
                            .addComponent(jButtonNovo)
                            .addComponent(jButtonSalvar)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelCardapios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-864)/2, (screenSize.height-697)/2, 864, 697);
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBAlimetancaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBAlimetancaoActionPerformed
        // TODO add your handling code here:
        if (jCheckBAlimetancao.isSelected()) {
            habilitaAlimentacao(true);
        } else {
            habilitaAlimentacao(false);
        }
    }//GEN-LAST:event_jCheckBAlimetancaoActionPerformed

    private void jCheckBEquipamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBEquipamentoActionPerformed
        // TODO add your handling code here:
        if (jCheckBEquipamento.isSelected()) {
            habilitaEquipamento(true);
        } else {
            habilitaEquipamento(false);
        }
    }//GEN-LAST:event_jCheckBEquipamentoActionPerformed

    private void jPanelCardapiosFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPanelCardapiosFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanelCardapiosFocusGained

    private void jButtonSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButtonSairActionPerformed

    private void jPanelHorarioMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelHorarioMouseEntered
        // TODO add your handling code here:
        String mensagem = "Para data use o botão ao lado do campo para abrir o calendário.\n\n"
                + "Para hora clique sobre o campo de hora, minuto ou segundo e arraste o"
                + " mouse para cima ou para baixo.";
        jtaInformacoes.setText(mensagem);
    }//GEN-LAST:event_jPanelHorarioMouseEntered

    private void jCheckBC1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBC1MouseEntered
        // TODO add your handling code here:
        String mensagem = "Cardápio\n\n"
                + "1ª Opção:\n"
                + "Chá e Café.";
        jtaInformacoes.setText(mensagem);
    }//GEN-LAST:event_jCheckBC1MouseEntered

    private void jCheckBC2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBC2MouseEntered
        // TODO add your handling code here:
        String mensagem = "Cardápio\n\n"
                + "2ª Opção:\n"
                + "Chá e Café.\n"
                + "Biscoitos: Salgado e Doce.";
        jtaInformacoes.setText(mensagem);
    }//GEN-LAST:event_jCheckBC2MouseEntered

    private void jCheckBC6MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBC6MouseEntered
        // TODO add your handling code here:
        String mensagem = "Cardápio\n\n"
                + "6ª Opção: (somente a pedido de Nutricionista)\n"
                + "Café sem açúcar, Chá de erva doce ou camomila sem açúcar,\n"
                + "Leite desnatado sem açúcar. Adoçante e Biscoito de água.";
        jtaInformacoes.setText(mensagem);
    }//GEN-LAST:event_jCheckBC6MouseEntered

    private boolean isDataVigor() {
        boolean result = true;
        DateFormat df = new SimpleDateFormat("yyyy");
        int ano = Integer.parseInt(df.format(jDateChooser.getDate()));
        if (ano < 2012) {
            result = false;
        }
        return result;
    }

    private boolean isDiaUtil() throws ParseException {
        boolean result = true;
        DateFormat formataData = new SimpleDateFormat("dd/MM/yyyy");
        DateFormat formataAno = new SimpleDateFormat("yyyy");
        List<Date> feriados = new ArrayList<Date>();
        int x, y, ano, a, b, c, d, e, dia, mes;
        Calendar calendar = Calendar.getInstance();
        Date feriadosCarnavalPascoaCorpusChrist;
        ano = Integer.parseInt(formataAno.format(jDateChooser.getDate()));
        x = 24;
        y = 5;
        a = ano % 19;
        b = ano % 4;
        c = ano % 7;
        d = (19 * a + x) % 30;
        e = (2 * b + 4 * c + 6 * d + y) % 7;
        if ((d + e) > 9) {
            dia = d + e - 9;
            mes = 4;
        } else {
            dia = d + e + 22;
            mes = 3;
        }
        feriadosCarnavalPascoaCorpusChrist = formataData.parse(dia + "/" + mes + "/" + ano);
        calendar.setTime(feriadosCarnavalPascoaCorpusChrist);
        calendar.add(Calendar.DATE, -2);
        feriados.add(formataData.parse(formataData.format(calendar.getTime())));
        calendar.add(Calendar.DATE, -45);
        feriados.add(formataData.parse(formataData.format(calendar.getTime())));
        calendar.add(Calendar.DATE, 47 + 60);
        feriados.add(formataData.parse(formataData.format(calendar.getTime())));
        feriados.add(formataData.parse("01/01/" + ano));
        feriados.add(formataData.parse("25/01/" + ano));
        feriados.add(formataData.parse("21/04/" + ano));
        feriados.add(formataData.parse("01/05/" + ano));
        feriados.add(formataData.parse("09/07/" + ano));
        feriados.add(formataData.parse("07/09/" + ano));
        feriados.add(formataData.parse("12/10/" + ano));
        feriados.add(formataData.parse("15/11/" + ano));
        feriados.add(formataData.parse("20/11/" + ano));
        feriados.add(formataData.parse("25/12/" + ano));

        for (Date date : feriados) {
            if (date.equals(formataData.parse(formataData.format(jDateChooser.getDate())))) {
                result = false;
                break;
            }
        }
        return result;
    }

    private boolean isLocalDisponivel() throws ClassNotFoundException, SQLException, ParseException {
        boolean result = true;
        OperacaoBD bd = new OperacaoBD();
        DateFormat formataData = new SimpleDateFormat(jDateChooser.getDateFormatString());
        DateFormat formataHora = new SimpleDateFormat("HH:mm:ss");

        if (jCheckBAnoTodo.isSelected()) {
            DateFormat formataDataSomenteAno = new SimpleDateFormat("yyyy");

            Date dataAtividade = formataData.parse(formataData.format(jDateChooser.getDate()));
            int anoCorrente = Integer.parseInt(formataDataSomenteAno.format(jDateChooser.getDate()));
            int ano = anoCorrente;
            int i;
            for (i = 0; (ano == anoCorrente) && result; i++) {
                Calendar calendar = Calendar.getInstance();
                calendar.setTime(dataAtividade);
                calendar.add(Calendar.DATE, i * 7);
                anoCorrente = Integer.parseInt(formataDataSomenteAno.format(calendar.getTime()));
                if (ano == anoCorrente) {
                    dataAtividade = formataData.parse(formataData.format(calendar.getTime()));
                    result = bd.isDataDisponivel(jcbLocalSolicitado.getSelectedItem() + "",
                            dataAtividade, Time.valueOf(jtcHoraInicio.getFormatedTime()),
                            Time.valueOf(jtcHoraTermino.getFormatedTime()));
                }
            }
        } else if (Integer.parseInt(jsSemanas.getValue() + "") > 1) {
            Date dataAtividade = formataData.parse(formataData.format(jDateChooser.getDate()));
            int i;
            for (i = 0; (i < Integer.parseInt(jsSemanas.getValue() + "")) && result; i++) {
                Calendar calendar = Calendar.getInstance();
                calendar.setTime(dataAtividade);
                calendar.add(Calendar.DATE, i * 7);
                dataAtividade = formataData.parse(formataData.format(calendar.getTime()));
                result = bd.isDataDisponivel(jcbLocalSolicitado.getSelectedItem() + "",
                        dataAtividade, Time.valueOf(jtcHoraInicio.getFormatedTime()),
                        Time.valueOf(jtcHoraTermino.getFormatedTime()));
            }
        } else {

            result = bd.isDataDisponivel(jcbLocalSolicitado.getSelectedItem() + "",
                    formataData.parse(formataData.format(jDateChooser.getDate())),
                    Time.valueOf(jtcHoraInicio.getFormatedTime()),
                    Time.valueOf(jtcHoraTermino.getFormatedTime()));
        }
        return result;
    }

    private boolean isDadosOK(SolicitacaoEspaco solicitacao) throws ParseException {
        boolean result = true;
        try {
            String mensagem = null;
            if (!isDataVigor()) {
                mensagem = "Por favor agende para a partir de Janeiro de 2012";
                result = false;
            } else if (!isDiaUtil()) {
                mensagem = "Dia solicitado é feriado";
                result = false;
            } else if ((jcbLocalSolicitado.getSelectedItem() + "").equals("ANFITEATRO") && jCheckBAlimetancao.isSelected()) {
                mensagem = "Não é permitido solicitar cardápio para o Anfiteatro";
                result = false;
            } else if (!isAlimentacaoEspecificada()) {
                mensagem = "Por favor especifique o cardápio ou deselecione a opção de Alimentação.";
                result = false;
            } else if (!isAlimentacaoParticipantesOK()) {
                mensagem = "Cardápio incompatível com número mínimo de participantes.";
                result = false;
            } else if (!isHorarioAlimentacaoCorreto()) {
                mensagem = "Horário de alimentação fora da atividade.";
                result = false;
            } else if (!isCamposObrigatoriosPreeenchidos()) {
                mensagem = "Por favor preencha os campos obrigatórios. Os mesmo se encontram em azul.";
                result = false;
            } else if (!isDataCorreta()) {
                mensagem = "A data selecionada já passou";
                result = false;
            } else if (!isEquipamentoEspecificado()) {
                mensagem = "Por favor especifique os equipamentos ou deselecione a opção de Equipamento.";
                result = false;
            } else if (!isHorarioCorreto()) {
                mensagem = "O horário de término deve ser posterior ao de início.";
                result = false;
            } else if (!isLocalDisponivel()) {
                mensagem = "O local solicitado já está agendado para outra atividade";
                result = false;
            }
            if (!result) {
                JOptionPane.showMessageDialog(this, mensagem, "Erro de preenchimento do Formulário", JOptionPane.ERROR_MESSAGE);
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Solicitacoes.class.getName()).log(Level.SEVERE, null, ex);
            result = false;
        } catch (SQLException ex) {
            Logger.getLogger(Solicitacoes.class.getName()).log(Level.SEVERE, null, ex);
            result = false;
        }
        return result;
    }

    private void jButtonSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarActionPerformed
        try {
            OperacaoBD bd = new OperacaoBD();
            SolicitacaoEspaco solicitacao = getSolicitacaoEspaco();
            boolean result = true;
            if (isDadosOK(solicitacao) && (JOptionPane.showConfirmDialog(this, "Confirma salvar estes dados") == 0)) {
                int i;
                if (jCheckBAnoTodo.isSelected()) {
                    DateFormat formataDataSomenteAno = new SimpleDateFormat("yyyy");
                    DateFormat formataData = new SimpleDateFormat(jDateChooser.getDateFormatString());
                    Date dataAtividade = solicitacao.getDataAtividade();
                    int anoCorrente = Integer.parseInt(formataDataSomenteAno.format(jDateChooser.getDate()));
                    int ano = anoCorrente;
                    for (i = 0; ano == anoCorrente; i++) {
                        Calendar calendar = Calendar.getInstance();
                        calendar.setTime(dataAtividade);
                        calendar.add(Calendar.DATE, i * 7);
                        anoCorrente = Integer.parseInt(formataDataSomenteAno.format(calendar.getTime()));
                        if (ano == anoCorrente) {
                            solicitacao.setDataAtividade(formataData.parse(formataData.format(calendar.getTime())));
                            result = result && bd.salvar(solicitacao);
                        }
                    }
                } else if (Integer.parseInt(jsSemanas.getValue() + "") == 1) {
                    result = result && bd.salvar(solicitacao);
                } else {
                    DateFormat formataData = new SimpleDateFormat(jDateChooser.getDateFormatString());
                    Date dataAtividade = solicitacao.getDataAtividade();
                    for (i = 0; i < Integer.parseInt(jsSemanas.getValue() + ""); i++) {
                        Calendar calendar = Calendar.getInstance();
                        calendar.setTime(dataAtividade);
                        calendar.add(Calendar.DATE, i * 7);
                        solicitacao.setDataAtividade(formataData.parse(formataData.format(calendar.getTime())));
                        solicitacao.setSemanas(Integer.parseInt(jsSemanas.getValue() + "") - i);
                        result = result && bd.salvar(solicitacao);
                    }
                }
                if (result) {
                    JOptionPane.showMessageDialog(this, "Solicitação salva com Sucesso");
                    jButtonSalvar.setEnabled(false);
                } else {
                    JOptionPane.showMessageDialog(this, "Falha ao conectar o banco de dados", "Erro de gravação", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (ClassNotFoundException ex) {
            //Logger.getLogger(Solicitacoes.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Falha ao conectar o banco de dados", "Erro de gravação", JOptionPane.ERROR_MESSAGE);
        } catch (ParseException ex) {
            //Logger.getLogger(Solicitacoes.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Falha ao conectar o banco de dados", "Erro de gravação", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButtonSalvarActionPerformed

    private void jPanelEventoSemanaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelEventoSemanaMouseEntered
        // TODO add your handling code here:
        String mensagem = "Evento do ano todo: Através desta opção o evento será agendado"
                + " até o final do ano especificado mantendo as características (dia da semana,"
                + " horário e local).\nSemanas do evento: Através desta opção é possível especificar"
                + " por quantas semanas o eventos se realizará.\nPor padrão o valor é 1.";
        jtaInformacoes.setText(mensagem);
    }//GEN-LAST:event_jPanelEventoSemanaMouseEntered

    private void jButtonNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNovoActionPerformed
        // TODO add your handling code here:
        jcbLocalSolicitado.setSelectedIndex(0);
        jcbCoordenacaoSol.setSelectedIndex(0);
        jtfNomeAtividade.setText(null);
        jtfExecutorAtividade.setText(null);
        jDateChooser.setDate(null);
        jsParticipantes.setValue(1);
        jtcHoraInicio.setTime(Time.valueOf("07:00:00"));
        jtcHoraTermino.setTime(Time.valueOf("08:00:00"));
        jtcHoraAlimentacao.setTime(Time.valueOf(("07:00:00")));
        jCheckBAlimetancao.setSelected(false);
        jCheckBAnoTodo.setSelected(false);
        jCheckBC1.setSelected(false);
        jCheckBC2.setSelected(false);
        jCheckBC3.setSelected(false);
        jCheckBC4.setSelected(false);
        jCheckBC5.setSelected(false);
        jCheckBC6.setSelected(false);
        jCheckBCaixaSom.setSelected(false);
        jCheckBDVD.setSelected(false);
        jCheckBEquipamento.setSelected(false);
        jCheckBFoto.setSelected(false);
        jCheckBMesaSom.setSelected(false);
        jCheckBMicrofone.setSelected(false);
        jCheckBNotebook.setSelected(false);
        jCheckBProjetor.setSelected(false);
        jCheckBTelevisao.setSelected(false);
        jCheckBVK7.setSelected(false);
        jCheckBVideo.setSelected(false);
        habilitaAlimentacao(false);
        habilitaEquipamento(false);
        jsSemanas.setValue(+1);
        jButtonSalvar.setEnabled(true);
        jtfObservacaoCliente.setText(null);

    }//GEN-LAST:event_jButtonNovoActionPerformed

    private void jCheckBC3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBC3ActionPerformed
        // TODO add your handling code here:
        jCheckBC1.setSelected(false);
        jCheckBC2.setSelected(false);
        jCheckBC4.setSelected(false);
        jCheckBC5.setSelected(false);
        jCheckBC6.setSelected(false);
    }//GEN-LAST:event_jCheckBC3ActionPerformed

    private void jCheckBC4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBC4ActionPerformed
        // TODO add your handling code here:
        jCheckBC1.setSelected(false);
        jCheckBC2.setSelected(false);
        jCheckBC3.setSelected(false);
        jCheckBC5.setSelected(false);
        jCheckBC6.setSelected(false);
    }//GEN-LAST:event_jCheckBC4ActionPerformed

    private void jCheckBC5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBC5ActionPerformed
        // TODO add your handling code here:
        jCheckBC1.setSelected(false);
        jCheckBC2.setSelected(false);
        jCheckBC3.setSelected(false);
        jCheckBC4.setSelected(false);
        jCheckBC6.setSelected(false);
    }//GEN-LAST:event_jCheckBC5ActionPerformed

    private void jCheckBC3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBC3MouseEntered
        // TODO add your handling code here:
        String mensagem = "Cardápio\n\n"
                + "3ª Opção: (aproximadamente 30 pessoas)\n"
                + "Café, Chá ou Suco\n"
                + "Bolo ou Torta\n"
                + "Obs: Para eventos no período da manhã será servido Café, Chá e Bolo. "
                + "Para eventos próximos ao horário do almoço e no período da tarde, será servido Torta e Suco.";
        jtaInformacoes.setText(mensagem);
    }//GEN-LAST:event_jCheckBC3MouseEntered

    private void jCheckBC4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBC4MouseEntered
        // TODO add your handling code here:
        String mensagem = "Cardápio\n\n"
                + "4ª Opção: (acima de 100 pessoas)\n"
                + "Café, Refrigerante\n"
                + "Bolo ou Torta\n";
        jtaInformacoes.setText(mensagem);
    }//GEN-LAST:event_jCheckBC4MouseEntered

    private void jCheckBC5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBC5MouseEntered
        // TODO add your handling code here:
        String mensagem = "Cardápio\n\n"
                + "5ª Opção: (acima de 400 pessoas)\n"
                + "Refrigerante\n"
                + "Bolo recheado\n"
                + "Lanche";
        jtaInformacoes.setText(mensagem);
    }//GEN-LAST:event_jCheckBC5MouseEntered

    private void jCheckBC1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBC1ActionPerformed
        // TODO add your handling code here:
        jCheckBC2.setSelected(false);
        jCheckBC3.setSelected(false);
        jCheckBC4.setSelected(false);
        jCheckBC5.setSelected(false);
        jCheckBC6.setSelected(false);
    }//GEN-LAST:event_jCheckBC1ActionPerformed

    private void jCheckBC2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBC2ActionPerformed
        // TODO add your handling code here:
        jCheckBC1.setSelected(false);
        jCheckBC3.setSelected(false);
        jCheckBC4.setSelected(false);
        jCheckBC5.setSelected(false);
        jCheckBC6.setSelected(false);
    }//GEN-LAST:event_jCheckBC2ActionPerformed

    private void jCheckBC6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBC6ActionPerformed
        // TODO add your handling code here:
        jCheckBC1.setSelected(false);
        jCheckBC2.setSelected(false);
        jCheckBC3.setSelected(false);
        jCheckBC4.setSelected(false);
        jCheckBC5.setSelected(false);
    }//GEN-LAST:event_jCheckBC6ActionPerformed

    private SolicitacaoEspaco getSolicitacaoEspaco() throws ParseException {
        DateFormat formataData = new SimpleDateFormat(jDateChooser.getDateFormatString());
        DateFormat formataHora = new SimpleDateFormat("HH:mm:ss");
        SolicitacaoEspaco solicitacao = new SolicitacaoEspaco();
        solicitacao.setAlimentacao(jCheckBAlimetancao.isSelected());
        solicitacao.setAnoTodo(jCheckBAnoTodo.isSelected());
        if (jCheckBAlimetancao.isSelected()) {
            solicitacao.setCard1(jCheckBC1.isSelected());
            solicitacao.setCard2(jCheckBC2.isSelected());
            solicitacao.setCard3(jCheckBC3.isSelected());
            solicitacao.setCard4(jCheckBC4.isSelected());
            solicitacao.setCard5(jCheckBC5.isSelected());
            solicitacao.setCard6(jCheckBC6.isSelected());
            solicitacao.setHoraAlimentacao(Time.valueOf(jtcHoraAlimentacao.getFormatedTime()));
        }
        if (jCheckBEquipamento.isSelected()) {
            solicitacao.setCaixasSom(jCheckBCaixaSom.isSelected());
            solicitacao.setDataShow(jCheckBProjetor.isSelected());
            solicitacao.setDvd(jCheckBDVD.isSelected());
            solicitacao.setFilmar(jCheckBVideo.isSelected());
            solicitacao.setFotografar(jCheckBFoto.isSelected());
            solicitacao.setMesaSom(jCheckBMesaSom.isSelected());
            solicitacao.setMicrofone(jCheckBMicrofone.isSelected());
            solicitacao.setNotebook(jCheckBNotebook.isSelected());
            solicitacao.setTelevisao(jCheckBTelevisao.isSelected());
            solicitacao.setVideoCassete(jCheckBVK7.isSelected());
        }
        solicitacao.setCoordenacaoSolicitante(jcbCoordenacaoSol.getSelectedItem() + "");
        if (jDateChooser.getDate() != null) {
            solicitacao.setDataAtividade(formataData.parse(formataData.format(jDateChooser.getDate())));
        }
        solicitacao.setDataSolicitacao(formataData.parse(formataData.format(new Date())));
        solicitacao.setExecutorAtividade(jtfExecutorAtividade.getText());
        solicitacao.setHoraAtividade(Time.valueOf(jtcHoraInicio.getFormatedTime()));
        solicitacao.setHoraSolicitacao(Time.valueOf(formataHora.format(new Date())));
        solicitacao.setHoraTermino(Time.valueOf(jtcHoraTermino.getFormatedTime()));
        solicitacao.setLocalSolicitado(jcbLocalSolicitado.getSelectedItem() + "");
        solicitacao.setNomeAtividade(jtfNomeAtividade.getText());
        solicitacao.setNumeroParticipantes(Integer.parseInt(jsParticipantes.getValue() + ""));
        solicitacao.setSemanas(Integer.parseInt(jsSemanas.getValue() + ""));
        solicitacao.setSolicitante(Solicitante);
        solicitacao.setObservacaoCliente(jtfObservacaoCliente.getText());
        return solicitacao;
    }

    private boolean isCamposObrigatoriosPreeenchidos() {
        boolean result = true;
        if (jcbLocalSolicitado.getSelectedIndex() == 0) {
            result = false;
        } else if (jcbCoordenacaoSol.getSelectedIndex() == 0) {
            result = false;
        } else if (jtfNomeAtividade.getText() == null) {
            result = false;
        } else if (jtfExecutorAtividade.getText() == null) {
            result = false;
        } else if ("00:00:00".equals(jtcHoraInicio.getFormatedTime())) {
            result = false;
        } else if ("00:00:00".equals(jtcHoraTermino.getFormatedTime())) {
            result = false;
        } else {
            DateFormat df = new SimpleDateFormat(jDateChooser.getDateFormatString());
            if (jDateChooser.getDate() == null) {
                result = false;
            } else {
                try {
                    if (jDateChooser.getDate() == null) {
                        result = false;
                    } else {
                        df.parse(df.format(jDateChooser.getDate()));
                    }
                } catch (ParseException ex) {
                    Logger.getLogger(Solicitacoes.class.getName()).log(Level.SEVERE, null, ex);
                    result = false;
                }
            }
        }
        return result;
    }

    private boolean isDataCorreta() throws ParseException {
        boolean result = true;
        DateFormat df = new SimpleDateFormat(jDateChooser.getDateFormatString());
        if (jDateChooser.getDate() == null) {
            result = false;
        } else {
            Date dataSelecionada = df.parse(df.format(jDateChooser.getDate()));
            Date dataAtual = df.parse(df.format(new Date()));
            if (dataSelecionada.before(dataAtual)) {
                result = false;
            } else if (dataAtual.equals(dataSelecionada)) {
                df = new SimpleDateFormat("HH:mm:ss");
                Time horaInicio = Time.valueOf(jtcHoraInicio.getFormatedTime());
                Time horaFim = Time.valueOf(jtcHoraTermino.getFormatedTime());
                if (horaInicio.before(df.parse(df.format(new Date())))) {
                    result = false;
                } else if (horaFim.before(df.parse(df.format(new Date())))) {
                    result = false;
                }
            }
        }
        return result;
    }

    private boolean isHorarioCorreto() {
        boolean result = true;
        if (Time.valueOf(jtcHoraInicio.getFormatedTime()).after(Time.valueOf(jtcHoraTermino.getFormatedTime()))) {
            result = false;
        } else if (Time.valueOf(jtcHoraInicio.getFormatedTime()).before(Time.valueOf("07:00:00"))) {
            result = false;
        } else if (Time.valueOf(jtcHoraInicio.getFormatedTime()).after(Time.valueOf("18:00:00"))) {
            result = false;
        } else if (Time.valueOf(jtcHoraTermino.getFormatedTime()).before(Time.valueOf("08:00:00"))) {
            result = false;
        } else if (Time.valueOf(jtcHoraTermino.getFormatedTime()).after(Time.valueOf("19:00:00"))) {
            result = false;
        }
        return result;
    }

    private boolean isHorarioAlimentacaoCorreto() {
        boolean result = true;
        if (jCheckBAlimetancao.isSelected()) {
            if (Time.valueOf(jtcHoraAlimentacao.getFormatedTime()).before(Time.valueOf(jtcHoraInicio.getFormatedTime()))) {
                result = false;
            } else if (Time.valueOf(jtcHoraAlimentacao.getFormatedTime()).after(Time.valueOf(jtcHoraTermino.getFormatedTime()))) {
                result = false;
            }
        }
        return result;
    }

    private boolean isAlimentacaoEspecificada() {
        boolean result = true;
        if (jCheckBAlimetancao.isSelected()) {
            result = false || jCheckBC1.isSelected() || jCheckBC2.isSelected()
                    || jCheckBC3.isSelected() || jCheckBC4.isSelected() || jCheckBC5.isSelected()
                    || jCheckBC6.isSelected();
        }
        return result;
    }

    private boolean isAlimentacaoParticipantesOK() {
        boolean result = true;
        if (jCheckBAlimetancao.isSelected()) {
            if (jCheckBC3.isSelected() && (Integer.parseInt(jsParticipantes.getValue() + "") < 25)) {
                result = false;
            }
        } else if (jCheckBC4.isSelected() && (Integer.parseInt(jsParticipantes.getValue() + "") < 100)) {
            result = false;
        } else if (jCheckBC5.isSelected() && (Integer.parseInt(jsParticipantes.getValue() + "") < 400)) {
            result = false;
        }
        return result;
    }

    private boolean isEquipamentoEspecificado() {
        boolean result = true;
        if (jCheckBEquipamento.isSelected()) {
            result = false || jCheckBCaixaSom.isSelected() || jCheckBDVD.isSelected()
                    || jCheckBFoto.isSelected() || jCheckBMesaSom.isSelected()
                    || jCheckBMicrofone.isSelected() || jCheckBNotebook.isSelected()
                    || jCheckBProjetor.isSelected() || jCheckBTelevisao.isSelected()
                    || jCheckBVK7.isSelected() || jCheckBVideo.isSelected();
        }
        return result;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
        javax.swing.UIManager.setLookAndFeel(info.getClassName());
        break;
        }
        }
        } catch (ClassNotFoundException ex) {
        java.util.logging.Logger.getLogger(Solicitacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
        java.util.logging.Logger.getLogger(Solicitacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
        java.util.logging.Logger.getLogger(Solicitacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
        java.util.logging.Logger.getLogger(Solicitacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                Solicitacoes dialog = null;
                try {
                    dialog = new Solicitacoes(new javax.swing.JFrame(), true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Solicitacoes.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    private String Solicitante;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonNovo;
    private javax.swing.JButton jButtonSair;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JCheckBox jCheckBAlimetancao;
    private javax.swing.JCheckBox jCheckBAnoTodo;
    private javax.swing.JCheckBox jCheckBC1;
    private javax.swing.JCheckBox jCheckBC2;
    private javax.swing.JCheckBox jCheckBC3;
    private javax.swing.JCheckBox jCheckBC4;
    private javax.swing.JCheckBox jCheckBC5;
    private javax.swing.JCheckBox jCheckBC6;
    private javax.swing.JCheckBox jCheckBCaixaSom;
    private javax.swing.JCheckBox jCheckBDVD;
    private javax.swing.JCheckBox jCheckBEquipamento;
    private javax.swing.JCheckBox jCheckBFoto;
    private javax.swing.JCheckBox jCheckBMesaSom;
    private javax.swing.JCheckBox jCheckBMicrofone;
    private javax.swing.JCheckBox jCheckBNotebook;
    private javax.swing.JCheckBox jCheckBProjetor;
    private javax.swing.JCheckBox jCheckBTelevisao;
    private javax.swing.JCheckBox jCheckBVK7;
    private javax.swing.JCheckBox jCheckBVideo;
    private com.toedter.calendar.JDateChooser jDateChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelHoraAlimentacao;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelCardapios;
    private javax.swing.JPanel jPanelEquipamentos;
    private javax.swing.JPanel jPanelEventoSemana;
    private javax.swing.JPanel jPanelHorario;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox jcbCoordenacaoSol;
    private javax.swing.JComboBox jcbLocalSolicitado;
    private javax.swing.JSpinner jsParticipantes;
    private javax.swing.JSpinner jsSemanas;
    private javax.swing.JTextArea jtaInformacoes;
    private lu.tudor.santec.jtimechooser.JTimeChooser jtcHoraAlimentacao;
    private lu.tudor.santec.jtimechooser.JTimeChooser jtcHoraInicio;
    private lu.tudor.santec.jtimechooser.JTimeChooser jtcHoraTermino;
    private javax.swing.JTextField jtfExecutorAtividade;
    private javax.swing.JTextField jtfNomeAtividade;
    private javax.swing.JTextField jtfObservacaoCliente;
    // End of variables declaration//GEN-END:variables
}
